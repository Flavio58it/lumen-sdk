/// <reference path="../typings/main.d.ts"/>
angular.module('starter.controllers')
    .controller('SocialMonitorCtrl', function ($scope, $stateParams, $log, $ionicScrollDelegate, ngstomp, Settings) {
    $scope.posts = [];
    //    var stompUri = 'http://' + window.location.hostname + ':15674/stomp';
    var settings = Settings.getSettings();
    $log.info('Stomp connecting to', settings.stompUri);
    $scope.client = ngstomp(settings.stompUri);
    $scope.client.connect(settings.stompUser, settings.stompPassword, function () {
        $log.info('Stomp connected to', settings.stompUri);
        $scope.client.subscribe('/topic/lumen.*.social.perception', function (msg) {
            var post = JSON.parse(msg.body);
            $scope.posts.push(post);
            $ionicScrollDelegate.scrollBottom(true);
        });
    }, function (err) {
        $log.error('Stomp error:', err);
        $scope.client = null;
    }, '/');
})
    .controller('SocialExpressCtrl', function ($scope, $stateParams, $log, LumenStomp, Settings) {
    $scope.agentIds = ['arkan'];
    $scope.form = {
        agentId: 'arkan'
    };
    $scope.posts = [];
    $scope.networks = [
        { 'id': 'facebook', 'name': 'Facebook' },
        { 'id': 'twitter', 'name': 'Twitter' }
    ];
    $scope.post = { network: $scope.networks[0] };
    // Agent
    $scope.switchAgent = function () {
        LumenStomp.unsubscribeAll();
    };
    $scope.$on('$ionicView.enter', function () {
        LumenStomp.connect(function () {
            $scope.client = LumenStomp.getClient();
            $scope.switchAgent();
        });
    });
    $scope.$on('$ionicView.beforeLeave', function () {
        LumenStomp.disconnect();
    });
    $scope.submit = function () {
        $scope.communicateAction = {
            '@type': 'CommunicateAction',
            object: $scope.post.message
        };
        var topic = 'lumen.arkan.' + $scope.post.network.id + '.timeline.out';
        $log.info('Posting to', topic, ':', JSON.stringify($scope.communicateAction));
        $scope.client.send('/topic/' + topic, {}, JSON.stringify($scope.communicateAction));
    };
});

//# sourceMappingURL=data:application/json;base64,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QixPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU87U0FDOUIsQ0FBQztRQUNGLElBQUksS0FBSyxHQUFHLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQzlFLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUN4RixDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJzb2NpYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9tYWluLmQudHNcIi8+XHJcbmFuZ3VsYXIubW9kdWxlKCdzdGFydGVyLmNvbnRyb2xsZXJzJylcclxuXHJcbi5jb250cm9sbGVyKCdTb2NpYWxNb25pdG9yQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zLCAkbG9nLCAkaW9uaWNTY3JvbGxEZWxlZ2F0ZSwgbmdzdG9tcCwgU2V0dGluZ3MpIHtcclxuICAgICRzY29wZS5wb3N0cyA9IFtdO1xyXG5cclxuLy8gICAgdmFyIHN0b21wVXJpID0gJ2h0dHA6Ly8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgJzoxNTY3NC9zdG9tcCc7XHJcbiAgICB2YXIgc2V0dGluZ3MgPSBTZXR0aW5ncy5nZXRTZXR0aW5ncygpO1xyXG4gICAgJGxvZy5pbmZvKCdTdG9tcCBjb25uZWN0aW5nIHRvJywgc2V0dGluZ3Muc3RvbXBVcmkpO1xyXG4gICAgJHNjb3BlLmNsaWVudCA9IG5nc3RvbXAoc2V0dGluZ3Muc3RvbXBVcmkpO1xyXG4gICAgJHNjb3BlLmNsaWVudC5jb25uZWN0KHNldHRpbmdzLnN0b21wVXNlciwgc2V0dGluZ3Muc3RvbXBQYXNzd29yZCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJGxvZy5pbmZvKCdTdG9tcCBjb25uZWN0ZWQgdG8nLCBzZXR0aW5ncy5zdG9tcFVyaSk7XHJcbiAgICAgICAgJHNjb3BlLmNsaWVudC5zdWJzY3JpYmUoJy90b3BpYy9sdW1lbi4qLnNvY2lhbC5wZXJjZXB0aW9uJywgZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3N0ID0gSlNPTi5wYXJzZShtc2cuYm9keSk7XHJcbiAgICAgICAgICAgICRzY29wZS5wb3N0cy5wdXNoKHBvc3QpO1xyXG4gICAgICAgICAgICAkaW9uaWNTY3JvbGxEZWxlZ2F0ZS5zY3JvbGxCb3R0b20odHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAkbG9nLmVycm9yKCdTdG9tcCBlcnJvcjonLCBlcnIpO1xyXG4gICAgICAgICRzY29wZS5jbGllbnQgPSBudWxsO1xyXG4gICAgfSwgJy8nKTtcclxufSlcclxuXHJcbi5jb250cm9sbGVyKCdTb2NpYWxFeHByZXNzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zLCAkbG9nLCBMdW1lblN0b21wLCBTZXR0aW5ncykge1xyXG4gICAgJHNjb3BlLmFnZW50SWRzID0gWydhcmthbiddO1xyXG4gICAgJHNjb3BlLmZvcm0gPSB7XHJcbiAgICAgICAgYWdlbnRJZDogJ2Fya2FuJ1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUucG9zdHMgPSBbXTtcclxuICAgICRzY29wZS5uZXR3b3JrcyA9IFtcclxuICAgICAgICB7J2lkJzogJ2ZhY2Vib29rJywgJ25hbWUnOiAnRmFjZWJvb2snfSxcclxuICAgICAgICB7J2lkJzogJ3R3aXR0ZXInLCAnbmFtZSc6ICdUd2l0dGVyJ31cclxuICAgIF07XHJcbiAgICAkc2NvcGUucG9zdCA9IHtuZXR3b3JrOiAkc2NvcGUubmV0d29ya3NbMF19O1xyXG5cclxuICAgIC8vIEFnZW50XHJcbiAgICAkc2NvcGUuc3dpdGNoQWdlbnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBMdW1lblN0b21wLnVuc3Vic2NyaWJlQWxsKCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS4kb24oJyRpb25pY1ZpZXcuZW50ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBMdW1lblN0b21wLmNvbm5lY3QoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jbGllbnQgPSBMdW1lblN0b21wLmdldENsaWVudCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuc3dpdGNoQWdlbnQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5iZWZvcmVMZWF2ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIEx1bWVuU3RvbXAuZGlzY29ubmVjdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS5jb21tdW5pY2F0ZUFjdGlvbiA9IHtcclxuICAgICAgICAgICAgJ0B0eXBlJzogJ0NvbW11bmljYXRlQWN0aW9uJyxcclxuICAgICAgICAgICAgb2JqZWN0OiAkc2NvcGUucG9zdC5tZXNzYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHRvcGljID0gJ2x1bWVuLmFya2FuLicgKyAkc2NvcGUucG9zdC5uZXR3b3JrLmlkICsgJy50aW1lbGluZS5vdXQnO1xyXG4gICAgICAgICRsb2cuaW5mbygnUG9zdGluZyB0bycsIHRvcGljLCAnOicsIEpTT04uc3RyaW5naWZ5KCRzY29wZS5jb21tdW5pY2F0ZUFjdGlvbikpO1xyXG4gICAgICAgICRzY29wZS5jbGllbnQuc2VuZCgnL3RvcGljLycgKyB0b3BpYywge30sIEpTT04uc3RyaW5naWZ5KCRzY29wZS5jb21tdW5pY2F0ZUFjdGlvbikpO1xyXG4gICAgfTtcclxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
