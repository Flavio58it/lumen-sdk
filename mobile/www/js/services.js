/// <reference path="../typings/main.d.ts"/>
angular.module('starter.services', [])
    .factory('Settings', function ($q, $log, $window) {
    var defaultSettings = {
        stompUri: 'ws://167.205.66.35:15674/ws',
        stompUser: 'lumen',
        stompPassword: 'lumen',
        motionAllowed: false
    };
    return {
        getDefault: function () {
            return defaultSettings;
        },
        getSettings: function () {
            var settingsJson = $window.localStorage.getItem('settings');
            var settings = settingsJson !== null ? JSON.parse(settingsJson) : defaultSettings;
            return settings;
        },
        setSettings: function (settings) {
            $window.localStorage.setItem('settings', JSON.stringify(settings));
            return settings;
        }
    };
})
    .factory('LumenStomp', function ($q, $log, $window, Settings, ngstomp) {
    var client = null;
    var subscriptions = [];
    return {
        connect: function (callback) {
            var settings = Settings.getSettings();
            $log.info('Stomp connecting to', settings.stompUri);
            client = ngstomp(settings.stompUri);
            client.connect(settings.stompUser, settings.stompPassword, function () {
                $log.info('Stomp connected to', settings.stompUri);
                callback();
            }, function (err) {
                $log.error('Stomp error:', err);
                client = null;
            }, '/');
        },
        disconnect: function () {
            this.unsubscribeAll();
            if (client != null) {
                $log.info('Disconnecting', client);
                client.disconnect(function () { $log.info('Disconnected.'); });
                client = null;
            }
        },
        getClient: function () {
            return client;
        },
        getSubscriptions: function () {
            return subscriptions;
        },
        subscribe: function (topic, headers, body) {
            var sub = client.subscribe(topic, headers, body);
            subscriptions.push(sub);
            return sub;
        },
        unsubscribeAll: function () {
            _.forEach(subscriptions, function (sub) {
                $log.info('Unsubscribing', sub);
                sub.unsubscribe();
            });
            subscriptions = [];
        }
    };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDRDQUE0QztBQUM1QyxPQUFPLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQztLQUVyQyxPQUFPLENBQUMsVUFBVSxFQUFFLFVBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPO0lBQzNDLElBQUksZUFBZSxHQUFHO1FBQ2xCLFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMsU0FBUyxFQUFFLE9BQU87UUFDbEIsYUFBYSxFQUFFLE9BQU87UUFDdEIsYUFBYSxFQUFFLEtBQUs7S0FDdkIsQ0FBQztJQUNGLE1BQU0sQ0FBQztRQUNILFVBQVUsRUFBRTtZQUNSLE1BQU0sQ0FBQyxlQUFlLENBQUM7UUFDM0IsQ0FBQztRQUNELFdBQVcsRUFBRTtZQUNULElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzVELElBQUksUUFBUSxHQUFHLFlBQVksS0FBSyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxlQUFlLENBQUM7WUFDbEYsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNwQixDQUFDO1FBQ0QsV0FBVyxFQUFFLFVBQVMsUUFBUTtZQUMxQixPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDcEIsQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDLENBQUM7S0FFRCxPQUFPLENBQUMsWUFBWSxFQUFFLFVBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU87SUFDaEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUN2QixNQUFNLENBQUM7UUFDSCxPQUFPLEVBQUUsVUFBUyxRQUFRO1lBQ3RCLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRCxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLGFBQWEsRUFBRTtnQkFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ25ELFFBQVEsRUFBRSxDQUFDO1lBQ2YsQ0FBQyxFQUFFLFVBQVMsR0FBRztnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDaEMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNsQixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDWixDQUFDO1FBQ0QsVUFBVSxFQUFFO1lBQ1IsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDbkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxjQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNsQixDQUFDO1FBQ0wsQ0FBQztRQUNELFNBQVMsRUFBRTtZQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbEIsQ0FBQztRQUNELGdCQUFnQixFQUFFO1lBQ2QsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUN6QixDQUFDO1FBQ0QsU0FBUyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJO1lBQ3BDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqRCxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDZixDQUFDO1FBQ0QsY0FBYyxFQUFFO1lBQ1osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsVUFBUyxHQUFHO2dCQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDaEMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN2QixDQUFDO0tBQ0osQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUVEIiwiZmlsZSI6InNlcnZpY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvbWFpbi5kLnRzXCIvPlxyXG5hbmd1bGFyLm1vZHVsZSgnc3RhcnRlci5zZXJ2aWNlcycsIFtdKVxyXG5cclxuLmZhY3RvcnkoJ1NldHRpbmdzJywgZnVuY3Rpb24oJHEsICRsb2csICR3aW5kb3cpIHtcclxuICAgIHZhciBkZWZhdWx0U2V0dGluZ3MgPSB7XHJcbiAgICAgICAgc3RvbXBVcmk6ICd3czovLzE2Ny4yMDUuNjYuMzU6MTU2NzQvd3MnLFxyXG4gICAgICAgIHN0b21wVXNlcjogJ2x1bWVuJyxcclxuICAgICAgICBzdG9tcFBhc3N3b3JkOiAnbHVtZW4nLFxyXG4gICAgICAgIG1vdGlvbkFsbG93ZWQ6IGZhbHNlLFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0RGVmYXVsdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0U2V0dGluZ3M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRTZXR0aW5nczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXR0aW5nc0pzb24gPSAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZXR0aW5ncycpO1xyXG4gICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBzZXR0aW5nc0pzb24gIT09IG51bGwgPyBKU09OLnBhcnNlKHNldHRpbmdzSnNvbikgOiBkZWZhdWx0U2V0dGluZ3M7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldFNldHRpbmdzOiBmdW5jdGlvbihzZXR0aW5ncykge1xyXG4gICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncztcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufSlcclxuXHJcbi5mYWN0b3J5KCdMdW1lblN0b21wJywgZnVuY3Rpb24oJHEsICRsb2csICR3aW5kb3csIFNldHRpbmdzLCBuZ3N0b21wKSB7XHJcbiAgICB2YXIgY2xpZW50ID0gbnVsbDtcclxuICAgIHZhciBzdWJzY3JpcHRpb25zID0gW107XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNvbm5lY3Q6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IFNldHRpbmdzLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICRsb2cuaW5mbygnU3RvbXAgY29ubmVjdGluZyB0bycsIHNldHRpbmdzLnN0b21wVXJpKTtcclxuICAgICAgICAgICAgY2xpZW50ID0gbmdzdG9tcChzZXR0aW5ncy5zdG9tcFVyaSk7XHJcbiAgICAgICAgICAgIGNsaWVudC5jb25uZWN0KHNldHRpbmdzLnN0b21wVXNlciwgc2V0dGluZ3Muc3RvbXBQYXNzd29yZCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkbG9nLmluZm8oJ1N0b21wIGNvbm5lY3RlZCB0bycsIHNldHRpbmdzLnN0b21wVXJpKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgJGxvZy5lcnJvcignU3RvbXAgZXJyb3I6JywgZXJyKTtcclxuICAgICAgICAgICAgICAgIGNsaWVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0sICcvJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNjb25uZWN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZUFsbCgpO1xyXG4gICAgICAgICAgICBpZiAoY2xpZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICRsb2cuaW5mbygnRGlzY29ubmVjdGluZycsIGNsaWVudCk7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQuZGlzY29ubmVjdChmdW5jdGlvbigpIHsgJGxvZy5pbmZvKCdEaXNjb25uZWN0ZWQuJyk7IH0pO1xyXG4gICAgICAgICAgICAgICAgY2xpZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0Q2xpZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFN1YnNjcmlwdGlvbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9ucztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24odG9waWMsIGhlYWRlcnMsIGJvZHkpIHtcclxuICAgICAgICAgICAgdmFyIHN1YiA9IGNsaWVudC5zdWJzY3JpYmUodG9waWMsIGhlYWRlcnMsIGJvZHkpO1xyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goc3ViKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN1YjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVuc3Vic2NyaWJlQWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgXy5mb3JFYWNoKHN1YnNjcmlwdGlvbnMsIGZ1bmN0aW9uKHN1Yikge1xyXG4gICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdVbnN1YnNjcmliaW5nJywgc3ViKTtcclxuICAgICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucyA9IFtdO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59KVxyXG5cclxuO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
